{"version":3,"sources":["Title.js","Weather.js","FormFile.js","Suitcase.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Component","Weather","className","this","props","daily","splice","map","result","summary","temperatureHigh","id","temperatureLow","FormFile","onSubmit","getWeather","htmlFor","type","name","placeholder","Suitcase","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deleteItem","newListArray","state","clothingList","pop","setState","userInput","input","console","log","listArray","push","_this2","onChange","e","changeUserInput","target","value","onClick","addClothing","item","key","proxy","App","_callee","lat","long","apiCall","data","regenerator_default","wrap","_context","prev","next","preventDefault","elements","latitude","longitude","fetch","concat","sent","json","stop","src_Title","src_FormFile","src_Weather","high","low","src_Suitcase","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad8a8ee0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Title extends Component {\n    render() {\n        return (\n            <header>\n                <h1>Travel Packer!</h1>\n            </header>\n        )\n    }\n\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport \"./App.css\";\n\n\n\nclass Weather extends Component {\n\n    render() {\n        return (\n            <div className=\"weatherContainer\" >\n                {this.props.daily && this.props.daily.splice(0, 7).map((result) => {\n                    return <div className=\"dayForecast\">\n                        <p><b>Forecast:</b> \"{result.summary}\"</p>\n                        <p><b>High:</b> {result.temperatureHigh} F <span id=\"low\">\n                            <b>Low:</b> {result.temperatureLow} F</span></p>\n\n                    </div>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\n\nclass FormFile extends Component {\n    render() {\n        return (\n            <form onSubmit={this.props.getWeather} className=\"weatherInput\">\n                <label htmlFor=\"latitude\">Enter latitude</label>\n                <span className=\"inputMobile\"><input type=\"text\" id=\"latitude\" name=\"latitude\" placeholder=\"latitude\" /></span>\n                <label htmlFor=\"longitude\" id=\"longLabel\">Enter longitude</label>\n                <span className=\"inputMobile\"> <input type=\"text\" id=\"longitude\" name=\"longitude\" placeholder=\"longitude\" /></span>\n                <button id=\"forecastButton\">See Forecast!</button>\n            </form>\n        )\n    }\n\n};\n\nexport default FormFile;","import React, { Component } from 'react';\n\nclass Suitcase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userInput: '',\n            clothingList: []\n        }\n    }\n    changeUserInput(input) {\n        this.setState({\n            userInput: input\n        }, () => console.log(input))\n\n    }\n\n\n    addClothing(input) {\n        let listArray = this.state.clothingList;\n\n        listArray.push(input);\n\n        this.setState({\n            clothingList: listArray,\n            userInput: \"\"\n        })\n    }\n\n    deleteItem = () => {\n        let newListArray = this.state.clothingList;\n        newListArray.pop();\n        this.setState({\n            clothingList: newListArray,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"clothingItems\">\n                <div className=\"clothingForm\">\n                    <label htmlFor=\"clothingInput\">Add clothing here</label>\n                    <input\n                        onChange={(e) => this.changeUserInput(e.target.value)}\n                        value={this.state.userInput}\n                        type=\"text\"\n                        id=\"clothingInput\"\n                        placeholder=\"insert clothing\"\n                    />\n                    <button onClick={() => this.addClothing(this.state.userInput)}>Add to List</button>\n                </div>\n                <div className=\"suitcaseList\">\n                    <h2>Clothing to Bring</h2>\n                    <ul>\n                        {this.state.clothingList.map((item) => {\n                            return <li className=\"clothesList\">\n                                {item}\n                            </li>\n                        })}\n                    </ul>\n                    <button id=\"listDelete\" onClick={() => this.deleteItem()}>Delete last</button>\n                </div>\n            </div>\n        )\n    }\n\n\n};\n\nexport default Suitcase;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './Title';\nimport Weather from './Weather';\nimport FormFile from './FormFile';\nimport Suitcase from './Suitcase';\nimport MediaQueries from './MediaQueries.css';\n\n\nconst key = '0eb7bbceb524f6b41c9a80030c913889';\nconst proxy = 'https://cors-anywhere.herokuapp.com/';\n\nclass App extends Component {\n\n  state = {\n    daily: \"\"\n  }\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const lat = e.target.elements.latitude.value;\n    const long = e.target.elements.longitude.value;\n    const apiCall = await fetch(`${proxy}https://api.darksky.net/forecast/${key}/${lat},${long}`);\n    const data = await apiCall.json();\n    const daily = data.daily.data;\n\n    this.setState({\n      daily: daily\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        <FormFile getWeather={this.getWeather} />\n        <Weather\n          daily={this.state.daily}\n          high={this.state.high}\n          low={this.state.low}\n          summary={this.state.summary}\n        />\n        <Suitcase />\n\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}